diff --git a/Makefile b/Makefile
index 4564be1..81ea7c5 100644
--- a/Makefile
+++ b/Makefile
@@ -10,10 +10,11 @@ NAME=cub3D
 #FILES
 MAP=map_load.c
 GNL=get_next_line_utils.c get_next_line.c
-MATHS=math.c
+MATHS=math.c vectors_d.c vectors_i.c
 FT_UTILS=ft_utils.c
 PRIMITIVES=primitives.c           #Arquivos referentes a primitivas
 BASIC_GEOMETRIC= draw_rectangle.c draw_line.c draw_circle.c #Arquivos referentes a formas geometricas basicas
+DRAW_UTILS=draw_utils.c
 
 EVENTS=keyboard.c                             #Arquivos referentes a ventos de teclado mouse
 
@@ -22,7 +23,7 @@ PERSONAGEM=                                   #Arquivos referentes ao personagem
 
 LIBX=window.c image.c                         #Arquivos referentes a minilibx
 
-SRCS=$(GNL) $(MATHS) $(MAP) $(FT_UTILS) $(PRIMITIVES) $(BASIC_GEOMETRIC) $(EVENTS) $(CAMERA) $(LIBX)
+SRCS=$(GNL) $(MATHS) $(MAP) $(DRAW_UTILS) $(FT_UTILS) $(PRIMITIVES) $(BASIC_GEOMETRIC) $(EVENTS) $(CAMERA) $(LIBX)
 #VARIABLES
 OBJS=$(addprefix $(OBJ)/,$(SRCS:%.c=%.o))
 HEADER=-I $(INCLUDE) -I $(LIB)/libft/include
diff --git a/app/main.c b/app/main.c
index fa79073..749577d 100644
--- a/app/main.c
+++ b/app/main.c
@@ -6,125 +6,153 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/18 19:14:19 by briferre          #+#    #+#             */
-/*   Updated: 2023/07/04 19:41:13 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/14 14:55:38 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "header.h"
 
-void	object_init(t_mlx *mlx)
-{
-	mlx->radius = 25.0;
-}
-
-int	*vector_points(int p0, int p1, int p2, int p3)
-{
-	int	*p;
-
-	p = malloc(sizeof(int) * 4);
-	p[0] = p0;
-	p[1] = p1;
-	p[2] = p2;
-	p[3] = p3;
-	return (p);
-}
-
-void	draw_map(t_mlx *mlx)
-{
-	int	i;
-	int	j;
-
-	i = -1;
-	// while (mlx->map[++i] && i < 5)
-	while (mlx->map[++i])
-	{
-		j = -1;
-		// while (mlx->map[++j] && j < 1)
-		while (mlx->map[++j])
-			if (mlx->map[j][i] == '1')
-				draw_rect(&mlx->img, vector_points(i * 100,
-						j * 100, 0, 0),
-					create_trgb(0, 255, 0, 0));
-	}
-}
-
-double	find_wall(t_mlx *mlx)
-{
-	double	x[2];
-	double	y[2];
-	double	radius;
-
-	x[0] = ternary_d(cos(degrees_to_radians(mlx->camera.theta)) < 0, -mlx->radius, mlx->radius) + mlx->camera.x + 2 * cos(degrees_to_radians(mlx->camera.theta));
-	y[0] = ternary_d(sin(degrees_to_radians(mlx->camera.theta)) < 0, -mlx->radius, mlx->radius) + mlx->camera.y + 2 * sin(degrees_to_radians(mlx->camera.theta));
-	x[1] = mlx->camera.x;
-	y[1] = mlx->camera.y;
-	// printf("(%d, %d) %lf %lf %lf %lf\n", (int)(y[0] / 100), (int)(x[0] / 100), x[0], y[0], x[1], y[1]);
-	while (mlx->map[(int)(y[0] / 100)][(int)(x[0] / 100)] != '1')
-	{
-		x[1] += 2 * cos(degrees_to_radians(mlx->camera.theta));
-		y[1] += 2 * sin(degrees_to_radians(mlx->camera.theta));
-		x[0] = ternary_d(cos(degrees_to_radians(mlx->camera.theta)) < 0, -mlx->radius, mlx->radius) + x[1] + 2 * cos(degrees_to_radians(mlx->camera.theta));
-		y[0] = ternary_d(sin(degrees_to_radians(mlx->camera.theta)) < 0, -mlx->radius, mlx->radius) + y[1] + 2 * sin(degrees_to_radians(mlx->camera.theta));
-	}
-	radius = sqrt(pow(x[1] - mlx->camera.x, 2) + pow(y[1] - mlx->camera.y, 2));
-	return (radius);
-}
-
-void	draw_direction(t_mlx *mlx, int *p, int color)
-{
-	draw_line(&mlx->img, vector_points(
-			p[X],
-			p[X] + (find_wall(mlx) + mlx->radius) * cos(degrees_to_radians(mlx->camera.theta)),
-			p[Y],
-			p[Y] + (find_wall(mlx) + mlx->radius) * sin(degrees_to_radians(mlx->camera.theta))),
-		color);
-	free(p);
-}
-
-void	draw_objects(t_mlx *mlx)
-{
-	draw_map(mlx);
-	draw_circle(&mlx->img,
-		vector_points(mlx->camera.x, mlx->camera.y, 0, 0), mlx->radius,
-		create_trgb(0, 0, 255, 0));
-	draw_direction(mlx,
-		vector_points(mlx->camera.x, mlx->camera.y, 0, 0),
-		create_trgb(0, 0, 0, 255));
-}
-
-
 int	render(t_mlx *mlx)
 {
 	if (mlx->unlook)
 	{
-		draw_objects(mlx);
+		load_background(&mlx->img);
+		double	*position = vector_points_d(mlx->camera.position.x, mlx->camera.position.y, 0, 0);
+		double	*d = vector_points_d(0, 1, 0, 0);
+		double	*direction = vector_rotate(d, mlx->camera.theta);
+		double	*r = vector_points_d(0.66, 0, 0, 0);
+		double	*camera_plane = vector_rotate(r, mlx->camera.theta);
+		free(d);
+		free(r);
+
+		for (int i = 0; i <= WIDTH; i++)
+		{
+			double multiple = 2 * (double)i / (double)WIDTH - 1;
+			double *camera_pixel = vector_emultiple_d(camera_plane, multiple); // OK
+
+			double *ray_dir = vector_add_d(direction, camera_pixel); // OK
+
+			double delta_dist_x; // OK
+			double delta_dist_y; // OK
+
+			// trata divisÃ£o por 0 // Ok
+			if (ray_dir[X] == 0)
+			{
+				delta_dist_x = 1;
+				delta_dist_y = 0;
+			}
+			else
+			{
+				if (ray_dir[Y])
+					delta_dist_x = abs_d(1 / ray_dir[X]);
+			}
+			if (ray_dir[Y] == 0)
+			{
+				delta_dist_x = 0;
+				delta_dist_y = 1;
+			}
+			else
+			{
+				if (ray_dir[X])
+					delta_dist_y = abs_d(1 / ray_dir[Y]);
+			}
+			// printf("%d: %lf %lf\n", i, delta_dist_x, delta_dist_y);
+
+
+			int	*map_pos = vector_points_i(position[X], position[Y], 0, 0); // Ok
+			// vector_print_i(map_pos);
+
+			double dist_to_side_x;
+			double dist_to_side_y;
+
+			int	step_x = 0;
+			int	step_y = 0;
+
+			if (ray_dir[X] < 0)
+			{
+				dist_to_side_x = (position[X] - (double)map_pos[X]) * delta_dist_x;
+				step_x = -1;
+			}
+			else
+			{
+				dist_to_side_x = ((double)map_pos[X] + 1 - position[X]) * delta_dist_x;
+				step_x = 1;
+
+			}
+			if (ray_dir[Y] < 0)
+			{
+				dist_to_side_y = (position[Y] - (double)map_pos[Y]) * delta_dist_y;
+				step_y = -1;
+
+			}
+			else
+			{
+				dist_to_side_y = ((double)map_pos[Y] + 1 - position[Y]) * delta_dist_y;
+				step_y = 1;
+			}
+			// printf("%d: %lf %lf\n", i, dist_to_side_x, dist_to_side_y);
+
+			int hit = 0;
+
+			int	hit_side;
+
+			double	dda_line_size_x = dist_to_side_x;
+			double	dda_line_size_y = dist_to_side_y;
+
+			int	*wall_map_pos = vector_points_i(map_pos[X], map_pos[Y], 0, 0);
+			// vector_print_i(wall_map_pos);
+
+			while (hit == 0)
+			{
+				// printf("%d: %lf %lf\n", i, dda_line_size_x, dda_line_size_y);
+				if (dda_line_size_x < dda_line_size_y)
+				{
+					wall_map_pos[X] += step_x;
+					dda_line_size_x += delta_dist_x;
+					hit_side = 0;
+				}
+				else
+				{
+					wall_map_pos[Y] += step_y;
+					dda_line_size_y += delta_dist_y;
+					hit_side = 1;
+				}
+				// printf("%d: %d %d\n", i, wall_map_pos[X], wall_map_pos[Y]);
+				if (mlx->map[wall_map_pos[X]][wall_map_pos[Y]] == '1')
+					hit = 1;
+			}
+			// printf("%d: %d %d\n", i, wall_map_pos[X], wall_map_pos[Y]);
+
+			double perpendicular_dist;
+
+			if (hit_side == 0)
+				perpendicular_dist = ternary_d((wall_map_pos[X] - position[X] + ((1 - step_x) / 2)) / ray_dir[X] < 0, -((wall_map_pos[X] - position[X] + ((1 - step_x) / 2)) / ray_dir[X]), (wall_map_pos[X] - position[X] + ((1 - step_x) / 2)) / ray_dir[X] ) ;
+			else
+				perpendicular_dist = ternary_d((wall_map_pos[Y] - position[Y] + ((1 - step_y) / 2)) / ray_dir[Y] < 0, -((wall_map_pos[Y] - position[Y] + ((1 - step_y) / 2)) / ray_dir[Y]), (wall_map_pos[Y] - position[Y] + ((1 - step_y) / 2)) / ray_dir[Y] ) ;
+
+			double wall_line_height = HEIGHT / perpendicular_dist;
+			draw_line(&mlx->img,
+				vector_points_i(i,
+												i,
+												(HEIGHT / 2) - (wall_line_height / 2),
+												(HEIGHT / 2) + (wall_line_height / 2)),
+				create_trgb(0, hit_side ? 255 : 128, 0, 0));
+
+			free(map_pos);
+			free(wall_map_pos);
+			free(camera_pixel);
+			free(ray_dir);
+		}
+
 		mlx_put_image_to_window(mlx->mlx_ptr, mlx->win_ptr, mlx->img.img, 0, 0);
 		mlx->unlook = 0;
+		free(position);
+		free(direction);
+		free(camera_plane);
 	}
 	return (0);
 }
 
-void	clear_memory_map(t_mlx *mlx)
-{
-	int	i;
-
-	i = -1;
-	while (++i < mlx->map_size && mlx->map[i])
-		free(mlx->map[i]);
-	free(mlx->map);
-}
-
-int	close_program(t_mlx *mlx)
-{
-	(void)mlx;
-	mlx_destroy_image(mlx->mlx_ptr, mlx->img.img);
-	mlx_destroy_window(mlx->mlx_ptr, mlx->win_ptr);
-	mlx_destroy_display(mlx->mlx_ptr);
-	free(mlx->mlx_ptr);
-	clear_memory_map(mlx);
-	return (0);
-}
-
 int	main(int argc, char **argv)
 {
 	t_mlx	mlx;
@@ -132,15 +160,18 @@ int	main(int argc, char **argv)
 	(void)argc;
 	(void)argv;
 	mlx.unlook = 1;
+	// ---- Init ----
 	map_load(&mlx);
 	window_init(&mlx);
 	image_init(&mlx);
 	cam_init(&mlx);
-	object_init(&mlx);
+
+	// ---- Render ----
 	mlx_loop_hook(mlx.mlx_ptr, render, &mlx);
+
 	mlx_key_hook(mlx.win_ptr, &handle_key_press, &mlx);
 	mlx_hook(mlx.win_ptr, 17, 0, close_program, &mlx);
-	mlx_hook(mlx.win_ptr, 2, 1L<<0, NULL, NULL);
+	mlx_hook(mlx.win_ptr, 2, 1L << 0, NULL, NULL);
 	mlx_loop(mlx.mlx_ptr);
 	return (0);
 }
diff --git a/include/header.h b/include/header.h
index b14eff2..e237298 100644
--- a/include/header.h
+++ b/include/header.h
@@ -6,7 +6,7 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/18 19:44:50 by briferre          #+#    #+#             */
-/*   Updated: 2023/06/29 19:23:35 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/14 13:49:59 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -37,26 +37,23 @@ typedef struct s_data
 	int		endian;
 }t_data;
 
-typedef struct s_camera
+typedef struct s_points
 {
-	double	modulo_cam;
 	double	x;
 	double	y;
 	double	z;
-	double	looking_x;
-	double	looking_y;
-	double	looking_z;
+}t_points;
+
+typedef struct s_camera
+{
+	t_points	position;
+	t_points	looking;
+	t_points	plane;
+	double	modulo_cam;
 	double	phi;
 	double	theta;
 }t_camera;
 
-typedef struct s_points
-{
-	double	x;
-	double	y;
-	double	z;
-}t_points;
-
 typedef struct s_mlx
 {
 	void		*mlx_ptr;
@@ -72,6 +69,17 @@ typedef struct s_mlx
 
 //------ MATHS ------
 double	degrees_to_radians(double degree);
+double	ray_to_plane(double direction, double plane, double multiple);
+double	ray_multiple(int i);
+double	magnitude(int delta_x, int delta_y);
+double	abs_d(double value);
+//vectors_d
+void		vector_print_d(double *v);
+double	*vector_add_d(double *v1, double *v2);
+double	*vector_emultiple_d(double *v1, double escalar);
+double	*vector_rotate(double *v, double angle);
+//vectors_i
+void		vector_print_i(int *v);
 
 //------ FT_UTILS ------
 //ft_utils.c
@@ -80,16 +88,19 @@ double	ternary_d(int condition, double a, double b);
 
 //------ MAP ------
 void	map_load(t_mlx *mlx);
+void	clear_memory_map(t_mlx *mlx);
 
 //------ DRAWS ------
 //draw_rectangle.c
-void	load_background(t_data *data, int color);
+void	load_background(t_data *data);
 void	draw_rect(t_data *data, int *p, int color);
 
 void	draw_line(t_data *data, int *p, int color);
 void	draw_objects(t_mlx *mlx);
 
-int		*vector_points(int p0, int p1, int p2, int p3);
+//------- DRAW UTILS --------
+int		*vector_points_i(int p0, int p1, int p2, int p3);
+double	*vector_points_d(double p0, double p1, double p2, double p3);
 
 //draw_circle.c
 void	draw_circle(t_data *data, int *p, int r, int color);
@@ -97,7 +108,6 @@ void	draw_circle(t_data *data, int *p, int r, int color);
 //primitives.c
 int		create_trgb(int t, int r, int g, int b);
 void	my_mlx_pixel_put(t_data *data, int x, int y, int color);
-void	screen_clear(t_data *data, int color);
 
 //camera.c
 void	cam_init(t_mlx *mlx);
@@ -110,6 +120,8 @@ int		handle_key_press(int keycode, t_mlx *mlx);
 //------ MINILIBX ------
 //window.c
 void	window_init(t_mlx *mlx);
+int		close_program(t_mlx *mlx);
+
 //image.c
 void	image_init(t_mlx *mlx);
 
diff --git a/maps/map2.cub b/maps/map2.cub
new file mode 100644
index 0000000..fa70232
--- /dev/null
+++ b/maps/map2.cub
@@ -0,0 +1,10 @@
+1111111111
+1100100001
+1000000101
+1000000001
+1000000001
+1100000011
+1000000001
+1000000001
+1100100011
+1111111111
\ No newline at end of file
diff --git a/src/camera.c b/src/camera.c
index b4361c4..f4a17ab 100644
--- a/src/camera.c
+++ b/src/camera.c
@@ -6,7 +6,7 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/21 18:35:14 by briferre          #+#    #+#             */
-/*   Updated: 2023/06/29 18:34:36 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/14 14:29:01 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -15,13 +15,17 @@
 void	cam_init(t_mlx *mlx)
 {
 	//posiÃ§Ã£o da camera
-	mlx->camera.x = 200.0;
-	mlx->camera.y = 200.0;
-	mlx->camera.z = 0.0;
+	mlx->camera.position.x = 1.5;
+	mlx->camera.position.y = 1.5;
+	mlx->camera.position.z = 0.0;
 	//onde a camera aponta
-	mlx->camera.looking_x = 300.0;
-	mlx->camera.looking_y = 300.0;
-	mlx->camera.looking_z = 0.0;
+	mlx->camera.looking.x = 0.0;
+	mlx->camera.looking.y = 1.0;
+	mlx->camera.looking.z = 0.0;
+	//plano
+	mlx->camera.plane.x = 0.66;
+	mlx->camera.plane.y = 0;
+	mlx->camera.plane.z = 0;
 	//angulo da camera
 	mlx->camera.phi = 45.0;
 	mlx->camera.theta = 0.0;
diff --git a/src/draw_circle.c b/src/draw_circle.c
index 30ab2d2..4a846ab 100644
--- a/src/draw_circle.c
+++ b/src/draw_circle.c
@@ -6,7 +6,7 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/28 15:31:23 by briferre          #+#    #+#             */
-/*   Updated: 2023/06/29 18:41:41 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/12 07:48:44 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -23,7 +23,7 @@ void	draw_circle(t_data *data, int *p, int r, int color)
 	theta = -1;
 	while (++theta < 360)
 	{
-		draw_line(data, vector_points(p[X], p[X] + cos(theta) * r,
+		draw_line(data, vector_points_i(p[X], p[X] + cos(theta) * r,
 				p[Y] + sin(theta) * r, p[Y] + sin(theta) * r),
 			color);
 		my_mlx_pixel_put(data, i + cos(theta) * r, j + sin(theta) * r, color);
diff --git a/src/draw_rectangle.c b/src/draw_rectangle.c
index ad886de..0ece47b 100644
--- a/src/draw_rectangle.c
+++ b/src/draw_rectangle.c
@@ -6,26 +6,12 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/18 21:08:36 by briferre          #+#    #+#             */
-/*   Updated: 2023/06/28 13:53:42 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/12 07:33:48 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "header.h"
 
-void	load_background(t_data *data, int color)
-{
-	int	i;
-	int	j;
-
-	i = -1;
-	while (++i < HEIGHT)
-	{
-		j = -1;
-		while (++j < WIDTH)
-			my_mlx_pixel_put(data, j, i, color);
-	}
-}
-
 void	draw_rect(t_data *data, int *p, int color)
 {
 	int	width;
diff --git a/src/draw_utils.c b/src/draw_utils.c
new file mode 100644
index 0000000..de4bda6
--- /dev/null
+++ b/src/draw_utils.c
@@ -0,0 +1,37 @@
+/* ************************************************************************** */
+/*                                                                            */
+/*                                                        :::      ::::::::   */
+/*   draw_utils.c                                       :+:      :+:    :+:   */
+/*                                                    +:+ +:+         +:+     */
+/*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
+/*                                                +#+#+#+#+#+   +#+           */
+/*   Created: 2023/07/11 09:09:49 by briferre          #+#    #+#             */
+/*   Updated: 2023/07/12 07:44:39 by briferre         ###   ########.fr       */
+/*                                                                            */
+/* ************************************************************************** */
+
+#include "header.h"
+
+int	*vector_points_i(int p0, int p1, int p2, int p3)
+{
+	int	*p;
+
+	p = malloc(sizeof(int) * 4);
+	p[0] = p0;
+	p[1] = p1;
+	p[2] = p2;
+	p[3] = p3;
+	return (p);
+}
+
+double	*vector_points_d(double p0, double p1, double p2, double p3)
+{
+	double	*p;
+
+	p = malloc(sizeof(double) * 4);
+	p[0] = p0;
+	p[1] = p1;
+	p[2] = p2;
+	p[3] = p3;
+	return (p);
+}
diff --git a/src/keyboard.c b/src/keyboard.c
index bccb6a3..43abb62 100644
--- a/src/keyboard.c
+++ b/src/keyboard.c
@@ -6,79 +6,57 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/18 21:20:56 by briferre          #+#    #+#             */
-/*   Updated: 2023/07/04 19:53:52 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/17 08:17:15 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "header.h"
 
-int	posi_to_index(int position)
-{
-	int	index;
-
-	index = position / 100;
-	if (index < 0)
-		index = 0;
-	if (index > WIDTH / 100)
-		index = WIDTH / 100 - 1;
-	printf("%d\n", index);
-	return (index);
-}
-
 int	handle_key_press(int keycode, t_mlx *mlx)
 {
 	double	x;
 	double	y;
 
-	mlx->unlook = 1;
+	// printf("(%lf, %lf) %c\n", mlx->camera.position.x, (mlx->camera.position.y), mlx->map[(int)(mlx->camera.position.x)][(int)(mlx->camera.position.y)]);
 	if (keycode == 'w')
 	{
-		x = ternary_d(cos(degrees_to_radians(mlx->camera.theta)) < 0, -mlx->radius, mlx->radius) + mlx->camera.x + 2 * cos(degrees_to_radians(mlx->camera.theta));
-		y = ternary_d(sin(degrees_to_radians(mlx->camera.theta)) < 0, -mlx->radius, mlx->radius) + mlx->camera.y;
-		if (mlx->map[(int)(y / 100)][(int)(x / 100)] != '1')
+		y = mlx->camera.position.y + 0.5;
+		if (mlx->map[(int)(mlx->camera.position.x)][(int)(y)] != '1'
+		)//&& mlx->map[(int)(mlx->camera.position.x)][(int)(mlx->camera.position.y + 0.1)] != '1')
+		{
+			mlx->camera.position.y += 0.1 * cos(degrees_to_radians(mlx->camera.theta));
+		}
+		x = mlx->camera.position.x + 0.5;
+		printf("(%lf, %lf) %c\n", x, y, mlx->map[(int)x][(int)y]);
+		if (mlx->map[(int)(x)][(int)(mlx->camera.position.y)] != '1'
+			 )//&& mlx->map[(int)(mlx->camera.position.x + 0.1)][(int)(mlx->camera.position.y)] != '1')
 		{
-			mlx->camera.x += 2 * cos(degrees_to_radians(mlx->camera.theta));
+			mlx->camera.position.x += 0.1 * sin(degrees_to_radians(mlx->camera.theta));
 		}
-		x = ternary_d(cos(degrees_to_radians(mlx->camera.theta)) < 0, -mlx->radius, mlx->radius) + mlx->camera.x;
-		y = ternary_d(sin(degrees_to_radians(mlx->camera.theta)) < 0, -mlx->radius, mlx->radius) + mlx->camera.y + 2 * sin(degrees_to_radians(mlx->camera.theta));
-		if (mlx->map[(int)(y / 100)][(int)(x / 100)] != '1')
-			mlx->camera.y += 2 * sin(degrees_to_radians(mlx->camera.theta));
 	}
 	if (keycode == 'a')
 	{
-		mlx->camera.theta += 5.0;
-		// if (mlx->map[(int)(mlx->camera.y / 100)][(int)((mlx->camera.x - 30.0) / 100)] != '1')
-		// 	mlx->camera.x -= 5.0;
+		mlx->camera.theta -= 3;
+		// mlx->camera.position.x -= 0.01;
 	}
 	if (keycode == 's')
 	{
-		x = ternary_d(cos(degrees_to_radians(mlx->camera.theta)) < 0, mlx->radius, -mlx->radius) + mlx->camera.x - 2 * cos(degrees_to_radians(mlx->camera.theta));
-		y = ternary_d(sin(degrees_to_radians(mlx->camera.theta)) < 0, mlx->radius, -mlx->radius) + mlx->camera.y - 2 * sin(degrees_to_radians(mlx->camera.theta));
-		if (mlx->map[(int)(y / 100)][(int)(x / 100)] != '1')
-		{
-			mlx->camera.x -= 2 * cos(degrees_to_radians(mlx->camera.theta));
-			mlx->camera.y -= 2 * sin(degrees_to_radians(mlx->camera.theta));
-		}
-		// 	mlx->camera.y -= 5.0;
+		// mlx->camera.position.y -= 0.01;
+		if (mlx->map[(int)(mlx->camera.position.x)][(int)(mlx->camera.position.y - 0.2)] != '1'
+			&& mlx->map[(int)(mlx->camera.position.x)][(int)(mlx->camera.position.y + 0.1)] != '1')
+			mlx->camera.position.y -= 0.1 * cos(degrees_to_radians(mlx->camera.theta));
+
+		if (mlx->map[(int)(mlx->camera.position.x - 0.2)][(int)(mlx->camera.position.y)] != '1'
+			&& mlx->map[(int)(mlx->camera.position.x + 0.1)][(int)(mlx->camera.position.y)] != '1')
+			mlx->camera.position.x -= 0.1 * sin(degrees_to_radians(mlx->camera.theta));
 	}
 	if (keycode == 'd')
 	{
-		mlx->camera.theta -= 5.0;
-		// if (mlx->map[(int)(mlx->camera.y / 100)][(int)((mlx->camera.x + 25.0) / 100)] != '1')
-		// 	mlx->camera.x += 5.0;
+		mlx->camera.theta += 3;
+		// mlx->camera.position.x += 0.01;
 	}
-	// printf("Position: %.f %.f\n", mlx->camera.x, mlx->camera.y);
-	/*
-		Matrix [y][x]
-			x x x
-		y
-		y
-		y
-	*/
-	// printf("Limite: (%d, %d) %c\n",
-	// 	(int)((mlx->camera.x + 10.0) / 100.0), // x
-	// 	(int)(mlx->camera.y / 100.0),          // y
-	// 	mlx->map[(int)(mlx->camera.y / 100)][(int)((mlx->camera.x + 10.0) / 100)]);
-	load_background(&mlx->img, create_trgb(0, 0, 0, 0));
+	if (keycode == 65307)
+		close_program(mlx);
+	mlx->unlook = 1;
 	return (0);
-}
+}
\ No newline at end of file
diff --git a/src/map_load.c b/src/map_load.c
index 835bac9..0ccd644 100644
--- a/src/map_load.c
+++ b/src/map_load.c
@@ -6,7 +6,7 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/23 08:27:09 by briferre          #+#    #+#             */
-/*   Updated: 2023/06/28 21:34:50 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/14 14:16:48 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -55,3 +55,13 @@ void	map_load(t_mlx *mlx)
 	get_map(mlx, fd);
 	close(fd);
 }
+
+void	clear_memory_map(t_mlx *mlx)
+{
+	int	i;
+
+	i = -1;
+	while (++i < mlx->map_size && mlx->map[i])
+		free(mlx->map[i]);
+	free(mlx->map);
+}
diff --git a/src/math.c b/src/math.c
index 6428468..4000666 100644
--- a/src/math.c
+++ b/src/math.c
@@ -6,7 +6,7 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/22 18:31:26 by briferre          #+#    #+#             */
-/*   Updated: 2023/06/22 18:36:16 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/14 09:30:33 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -16,3 +16,28 @@ double	degrees_to_radians(double degree)
 {
 	return (PI * degree / 180);
 }
+
+double	ray_multiple(int i)
+{
+	return (2 * ((double)i / (double)WIDTH) - 1);
+}
+
+double	ray_to_plane(double direction, double plane, double multiple)
+{
+	double	r;
+
+	r = direction + (plane * multiple);
+	return (r);
+}
+
+double	magnitude(int delta_x, int delta_y)
+{
+	return (sqrt(pow(delta_x, 2) + pow(delta_y, 2)));
+}
+
+double	abs_d(double value)
+{
+	if (value < 0)
+		return (-value);
+	return (value);
+}
diff --git a/src/primitives.c b/src/primitives.c
index 19a7c9d..967d866 100644
--- a/src/primitives.c
+++ b/src/primitives.c
@@ -6,7 +6,7 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/21 19:19:19 by briferre          #+#    #+#             */
-/*   Updated: 2023/06/22 18:04:29 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/12 16:04:41 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -31,16 +31,21 @@ void	my_mlx_pixel_put(t_data *data, int x, int y, int color)
 	*(unsigned int *)dst = color;
 }
 
-void	screen_clear(t_data *data, int color)
+void	load_background(t_data *data)
 {
 	int	i;
 	int	j;
 
 	i = -1;
-	while (++i < HEIGHT)
+	while (++i < WIDTH)
 	{
 		j = -1;
-		while (++j < WIDTH)
-			my_mlx_pixel_put(data, j, i, color);
+		while (++j <= HEIGHT)
+		{
+			if (j > HEIGHT / 2)
+				my_mlx_pixel_put(data, i, j, create_trgb(0, 190, 190, 255));
+			else
+				my_mlx_pixel_put(data, i, j, create_trgb(0, 130, 130, 130));
+		}
 	}
-}
+}
\ No newline at end of file
diff --git a/src/vectors_d.c b/src/vectors_d.c
new file mode 100644
index 0000000..c550a82
--- /dev/null
+++ b/src/vectors_d.c
@@ -0,0 +1,52 @@
+/* ************************************************************************** */
+/*                                                                            */
+/*                                                        :::      ::::::::   */
+/*   vectors_d.c                                        :+:      :+:    :+:   */
+/*                                                    +:+ +:+         +:+     */
+/*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
+/*                                                +#+#+#+#+#+   +#+           */
+/*   Created: 2023/07/14 08:54:07 by briferre          #+#    #+#             */
+/*   Updated: 2023/07/14 13:53:53 by briferre         ###   ########.fr       */
+/*                                                                            */
+/* ************************************************************************** */
+
+#include "header.h"
+
+void	vector_print_d(double *v)
+{
+	printf("[%lf, %lf, %lf, %lf]\n", v[0], v[1], v[2], v[3]);
+}
+
+double	*vector_add_d(double *v1, double *v2)
+{
+	int		i;
+	double	*v3;
+
+	v3 = malloc(sizeof(double) * 4);
+	i = -1;
+	while (++i < 4)
+		v3[i] = v1[i] + v2[i];
+	return (v3);
+}
+
+double	*vector_emultiple_d(double *v1, double escalar)
+{
+	int		i;
+	double	*v3;
+
+	v3 = malloc(sizeof(double) * 4);
+	i = -1;
+	while (++i < 4)
+		v3[i] = v1[i] * escalar;
+	return (v3);
+}
+
+double	*vector_rotate(double *v, double angle)
+{
+	double *r;
+
+	r = malloc(sizeof(double) * 4);
+	r[0] = cos(degrees_to_radians(angle)) * v[0] + sin(degrees_to_radians(angle)) * v[1];
+	r[1] = -sin(degrees_to_radians(angle)) * v[0] + cos(degrees_to_radians(angle)) * v[1];
+	return (r);
+}
diff --git a/src/vectors_i.c b/src/vectors_i.c
new file mode 100644
index 0000000..e9bec4a
--- /dev/null
+++ b/src/vectors_i.c
@@ -0,0 +1,43 @@
+/* ************************************************************************** */
+/*                                                                            */
+/*                                                        :::      ::::::::   */
+/*   vectors_i.c                                        :+:      :+:    :+:   */
+/*                                                    +:+ +:+         +:+     */
+/*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
+/*                                                +#+#+#+#+#+   +#+           */
+/*   Created: 2023/07/14 08:54:07 by briferre          #+#    #+#             */
+/*   Updated: 2023/07/14 10:07:59 by briferre         ###   ########.fr       */
+/*                                                                            */
+/* ************************************************************************** */
+
+#include "header.h"
+
+void	vector_print_i(int *v)
+{
+	printf("[%d, %d, %d, %d]\n", v[0], v[1], v[2], v[3]);
+}
+
+double	*vector_add_i(double *v1, double *v2)
+{
+	int		i;
+	double	*v3;
+
+	v3 = malloc(sizeof(double) * 4);
+	i = -1;
+	while (++i < 4)
+		v3[i] = v1[i] + v2[i];
+	return (v3);
+}
+
+double	*vector_emultiple_i(double *v1, double escalar)
+{
+	int		i;
+	double	*v3;
+
+	v3 = malloc(sizeof(double) * 4);
+	i = -1;
+	while (++i < 4)
+		v3[i] = v1[i] * escalar;
+	return (v3);
+}
+
diff --git a/src/window.c b/src/window.c
index e6e2fcd..d8f3f03 100644
--- a/src/window.c
+++ b/src/window.c
@@ -6,7 +6,7 @@
 /*   By: briferre <briferre@student.42sp.org.br>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/21 18:49:04 by briferre          #+#    #+#             */
-/*   Updated: 2023/06/21 20:42:35 by briferre         ###   ########.fr       */
+/*   Updated: 2023/07/11 09:54:18 by briferre         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -21,3 +21,15 @@ void	window_init(t_mlx *mlx)
 	if (!mlx->win_ptr)
 		printf("Erro\n");
 }
+
+int	close_program(t_mlx *mlx)
+{
+	(void)mlx;
+	mlx_destroy_image(mlx->mlx_ptr, mlx->img.img);
+	mlx_destroy_window(mlx->mlx_ptr, mlx->win_ptr);
+	mlx_destroy_display(mlx->mlx_ptr);
+	free(mlx->mlx_ptr);
+	clear_memory_map(mlx);
+	exit(EXIT_SUCCESS);
+	return (0);
+}
